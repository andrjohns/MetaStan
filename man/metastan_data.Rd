% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metastan_data.R
\name{metastan_data}
\alias{metastan_data}
\title{Prepare meta-analysis dataset for meta_stan function}
\usage{
metastan_data(
  id,
  treatment,
  x,
  type = c("normal", "binomial", "poisson"),
  y,
  se,
  v,
  count,
  total,
  exposure,
  labels,
  data,
  checkForConflicts = TRUE
)
}
\arguments{
\item{id, }{# study IDs}

\item{treatment, }{# (optional) vector indicating treatment groups}

\item{x, }{# (optional) regressor vector or matrix}

\item{v, }{# for normal outcomes}

\item{total, }{# for binomial outcomes (event count, sample size)}

\item{exposure, }{# for Poisson outcomes (count, exposure)}

\item{labels, }{# (optional) vector of row labels}

\item{data, }{# a data frame from which (some of) above variables may
be taken}

\item{type=c("normal", }{"binomial", "poisson"), # type of outcome}
}
\value{
A data frame with the generated columns.
}
\description{
\code{metastan_data} creates datasets suitable for meta_stan function
}
\details{
The resulting data.frame can be used as data argument in \code{meta_stan}.

  NB: arguments "id", "treatment", "x", "y", "se", "v", "count",
"total", "exposure", "labels"
      may be taken from local environment OR from "data" (data frame) argument.
 The returned object is a "list" of class "metastan_data"
 containing the following elements:
   - "id"        :  study identifier (a vector of type factor)
   - "treatment" :  (optional) a treatment identifier (a vector of type factor, or NULL)
  - "x"         :  (optional) covariable(s), (a numeric matrix, or NULL)
   - "type"      :  a flag identifying the outcome type ("normal", "binomial", or "poisson")
  - "outcome"   :  the actual outcome data (a two-column numeric matrix)
  - "call"      :  the original function call
}
\examples{
\dontrun{
# 2 studies, normal endpoint, no treatment/control, no covariable:
xx <- metastan_data(id=c("Mueller","Mueller", "Meier","Meier","Meier"),
                   type="normal",
                   y=c(1,2,3,3,4),
                   se=c(1,1,2,2,2))
xx
# check out the actual "plain" returned object
print.default(xx)
}
}
