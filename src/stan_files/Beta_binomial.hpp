/*
    MetaStan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaStan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaStan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_Beta_binomial_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Beta_binomial");
    reader.add_event(52, 52, "end", "model_Beta_binomial");
    return reader;
}

#include <meta_header.hpp>
 class model_Beta_binomial : public prob_grad {
private:
    int N;
    vector<int> rctrl;
    vector<int> nctrl;
    vector<int> rtrt;
    vector<int> ntrt;
public:
    model_Beta_binomial(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_Beta_binomial(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_Beta_binomial_namespace::model_Beta_binomial";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 9;
            validate_non_negative_index("rctrl", "N", N);
            context__.validate_dims("data initialization", "rctrl", "int", context__.to_vec(N));
            validate_non_negative_index("rctrl", "N", N);
            rctrl = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("rctrl");
            pos__ = 0;
            size_t rctrl_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < rctrl_limit_0__; ++i_0__) {
                rctrl[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("nctrl", "N", N);
            context__.validate_dims("data initialization", "nctrl", "int", context__.to_vec(N));
            validate_non_negative_index("nctrl", "N", N);
            nctrl = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("nctrl");
            pos__ = 0;
            size_t nctrl_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < nctrl_limit_0__; ++i_0__) {
                nctrl[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("rtrt", "N", N);
            context__.validate_dims("data initialization", "rtrt", "int", context__.to_vec(N));
            validate_non_negative_index("rtrt", "N", N);
            rtrt = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("rtrt");
            pos__ = 0;
            size_t rtrt_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < rtrt_limit_0__; ++i_0__) {
                rtrt[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("ntrt", "N", N);
            context__.validate_dims("data initialization", "ntrt", "int", context__.to_vec(N));
            validate_non_negative_index("ntrt", "N", N);
            ntrt = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("ntrt");
            pos__ = 0;
            size_t ntrt_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < ntrt_limit_0__; ++i_0__) {
                ntrt[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"rctrl[k0__]",rctrl[k0__],0);
            }
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"nctrl[k0__]",nctrl[k0__],1);
            }
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"rtrt[k0__]",rtrt[k0__],0);
            }
            current_statement_begin__ = 12;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"ntrt[k0__]",ntrt[k0__],1);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 16;
            validate_non_negative_index("pctrl", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 17;
            validate_non_negative_index("ptrt", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 18;
            ++num_params_r__;
            current_statement_begin__ = 19;
            ++num_params_r__;
            current_statement_begin__ = 20;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_Beta_binomial() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("pctrl")))
            throw std::runtime_error("variable pctrl missing");
        vals_r__ = context__.vals_r("pctrl");
        pos__ = 0U;
        validate_non_negative_index("pctrl", "N", N);
        context__.validate_dims("initialization", "pctrl", "double", context__.to_vec(N));
        std::vector<double> pctrl(N,double(0));
        for (int i0__ = 0U; i0__ < N; ++i0__)
            pctrl[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,pctrl[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable pctrl: ") + e.what());
        }

        if (!(context__.contains_r("ptrt")))
            throw std::runtime_error("variable ptrt missing");
        vals_r__ = context__.vals_r("ptrt");
        pos__ = 0U;
        validate_non_negative_index("ptrt", "N", N);
        context__.validate_dims("initialization", "ptrt", "double", context__.to_vec(N));
        std::vector<double> ptrt(N,double(0));
        for (int i0__ = 0U; i0__ < N; ++i0__)
            ptrt[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,ptrt[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ptrt: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("muctrl")))
            throw std::runtime_error("variable muctrl missing");
        vals_r__ = context__.vals_r("muctrl");
        pos__ = 0U;
        context__.validate_dims("initialization", "muctrl", "double", context__.to_vec());
        double muctrl(0);
        muctrl = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,muctrl);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable muctrl: ") + e.what());
        }

        if (!(context__.contains_r("mutrt")))
            throw std::runtime_error("variable mutrt missing");
        vals_r__ = context__.vals_r("mutrt");
        pos__ = 0U;
        context__.validate_dims("initialization", "mutrt", "double", context__.to_vec());
        double mutrt(0);
        mutrt = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,mutrt);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mutrt: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            vector<T__> pctrl;
            size_t dim_pctrl_0__ = N;
            pctrl.reserve(dim_pctrl_0__);
            for (size_t k_0__ = 0; k_0__ < dim_pctrl_0__; ++k_0__) {
                if (jacobian__)
                    pctrl.push_back(in__.scalar_lub_constrain(0,1,lp__));
                else
                    pctrl.push_back(in__.scalar_lub_constrain(0,1));
            }

            vector<T__> ptrt;
            size_t dim_ptrt_0__ = N;
            ptrt.reserve(dim_ptrt_0__);
            for (size_t k_0__ = 0; k_0__ < dim_ptrt_0__; ++k_0__) {
                if (jacobian__)
                    ptrt.push_back(in__.scalar_lub_constrain(0,1,lp__));
                else
                    ptrt.push_back(in__.scalar_lub_constrain(0,1));
            }

            T__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lub_constrain(0,1,lp__);
            else
                rho = in__.scalar_lub_constrain(0,1);

            T__ muctrl;
            (void) muctrl;  // dummy to suppress unused var warning
            if (jacobian__)
                muctrl = in__.scalar_lub_constrain(0,1,lp__);
            else
                muctrl = in__.scalar_lub_constrain(0,1);

            T__ mutrt;
            (void) mutrt;  // dummy to suppress unused var warning
            if (jacobian__)
                mutrt = in__.scalar_lub_constrain(0,1,lp__);
            else
                mutrt = in__.scalar_lub_constrain(0,1);


            // transformed parameters
            current_statement_begin__ = 24;
            T__ alphactrl;
            (void) alphactrl;  // dummy to suppress unused var warning

            stan::math::initialize(alphactrl, DUMMY_VAR__);
            stan::math::fill(alphactrl,DUMMY_VAR__);
            current_statement_begin__ = 25;
            T__ betactrl;
            (void) betactrl;  // dummy to suppress unused var warning

            stan::math::initialize(betactrl, DUMMY_VAR__);
            stan::math::fill(betactrl,DUMMY_VAR__);
            current_statement_begin__ = 26;
            T__ alphatrt;
            (void) alphatrt;  // dummy to suppress unused var warning

            stan::math::initialize(alphatrt, DUMMY_VAR__);
            stan::math::fill(alphatrt,DUMMY_VAR__);
            current_statement_begin__ = 27;
            T__ betatrt;
            (void) betatrt;  // dummy to suppress unused var warning

            stan::math::initialize(betatrt, DUMMY_VAR__);
            stan::math::fill(betatrt,DUMMY_VAR__);


            current_statement_begin__ = 29;
            stan::math::assign(alphactrl, ((muctrl * (1 - rho)) / rho));
            current_statement_begin__ = 30;
            stan::math::assign(alphatrt, ((mutrt * (1 - rho)) / rho));
            current_statement_begin__ = 31;
            stan::math::assign(betactrl, (((1 - muctrl) * (1 - rho)) / rho));
            current_statement_begin__ = 32;
            stan::math::assign(betatrt, (((1 - mutrt) * (1 - rho)) / rho));

            // validate transformed parameters
            if (stan::math::is_uninitialized(alphactrl)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: alphactrl";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(betactrl)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: betactrl";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(alphatrt)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: alphatrt";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(betatrt)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: betatrt";
                throw std::runtime_error(msg__.str());
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 24;
            check_greater_or_equal(function__,"alphactrl",alphactrl,0);
            current_statement_begin__ = 25;
            check_greater_or_equal(function__,"betactrl",betactrl,0);
            current_statement_begin__ = 26;
            check_greater_or_equal(function__,"alphatrt",alphatrt,0);
            current_statement_begin__ = 27;
            check_greater_or_equal(function__,"betatrt",betatrt,0);

            // model body

            current_statement_begin__ = 38;
            lp_accum__.add(beta_log<propto__>(pctrl, alphactrl, betactrl));
            current_statement_begin__ = 39;
            lp_accum__.add(beta_log<propto__>(ptrt, alphatrt, betatrt));
            current_statement_begin__ = 42;
            lp_accum__.add(binomial_log<propto__>(rctrl, nctrl, pctrl));
            current_statement_begin__ = 43;
            lp_accum__.add(binomial_log<propto__>(rtrt, ntrt, ptrt));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pctrl");
        names__.push_back("ptrt");
        names__.push_back("rho");
        names__.push_back("muctrl");
        names__.push_back("mutrt");
        names__.push_back("alphactrl");
        names__.push_back("betactrl");
        names__.push_back("alphatrt");
        names__.push_back("betatrt");
        names__.push_back("b_0");
        names__.push_back("theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_Beta_binomial_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> pctrl;
        size_t dim_pctrl_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_pctrl_0__; ++k_0__) {
            pctrl.push_back(in__.scalar_lub_constrain(0,1));
        }
        vector<double> ptrt;
        size_t dim_ptrt_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_ptrt_0__; ++k_0__) {
            ptrt.push_back(in__.scalar_lub_constrain(0,1));
        }
        double rho = in__.scalar_lub_constrain(0,1);
        double muctrl = in__.scalar_lub_constrain(0,1);
        double mutrt = in__.scalar_lub_constrain(0,1);
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(pctrl[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(ptrt[k_0__]);
            }
        vars__.push_back(rho);
        vars__.push_back(muctrl);
        vars__.push_back(mutrt);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 24;
            double alphactrl(0.0);
            (void) alphactrl;  // dummy to suppress unused var warning

            stan::math::initialize(alphactrl, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(alphactrl,DUMMY_VAR__);
            current_statement_begin__ = 25;
            double betactrl(0.0);
            (void) betactrl;  // dummy to suppress unused var warning

            stan::math::initialize(betactrl, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(betactrl,DUMMY_VAR__);
            current_statement_begin__ = 26;
            double alphatrt(0.0);
            (void) alphatrt;  // dummy to suppress unused var warning

            stan::math::initialize(alphatrt, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(alphatrt,DUMMY_VAR__);
            current_statement_begin__ = 27;
            double betatrt(0.0);
            (void) betatrt;  // dummy to suppress unused var warning

            stan::math::initialize(betatrt, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(betatrt,DUMMY_VAR__);


            current_statement_begin__ = 29;
            stan::math::assign(alphactrl, ((muctrl * (1 - rho)) / rho));
            current_statement_begin__ = 30;
            stan::math::assign(alphatrt, ((mutrt * (1 - rho)) / rho));
            current_statement_begin__ = 31;
            stan::math::assign(betactrl, (((1 - muctrl) * (1 - rho)) / rho));
            current_statement_begin__ = 32;
            stan::math::assign(betatrt, (((1 - mutrt) * (1 - rho)) / rho));

            // validate transformed parameters
            current_statement_begin__ = 24;
            check_greater_or_equal(function__,"alphactrl",alphactrl,0);
            current_statement_begin__ = 25;
            check_greater_or_equal(function__,"betactrl",betactrl,0);
            current_statement_begin__ = 26;
            check_greater_or_equal(function__,"alphatrt",alphatrt,0);
            current_statement_begin__ = 27;
            check_greater_or_equal(function__,"betatrt",betatrt,0);

            // write transformed parameters
        vars__.push_back(alphactrl);
        vars__.push_back(betactrl);
        vars__.push_back(alphatrt);
        vars__.push_back(betatrt);

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 47;
            double b_0(0.0);
            (void) b_0;  // dummy to suppress unused var warning

            stan::math::initialize(b_0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(b_0,DUMMY_VAR__);
            current_statement_begin__ = 48;
            double theta(0.0);
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(theta,DUMMY_VAR__);


            current_statement_begin__ = 50;
            stan::math::assign(b_0, logit(muctrl));
            current_statement_begin__ = 51;
            stan::math::assign(theta, (logit(mutrt) - logit(muctrl)));

            // validate generated quantities
            current_statement_begin__ = 47;
            current_statement_begin__ = 48;

            // write generated quantities
        vars__.push_back(b_0);
        vars__.push_back(theta);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_Beta_binomial";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pctrl" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ptrt" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muctrl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mutrt";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alphactrl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betactrl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alphatrt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betatrt";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pctrl" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ptrt" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muctrl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mutrt";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alphactrl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betactrl";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alphatrt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betatrt";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_Beta_binomial_namespace::model_Beta_binomial stan_model;


#endif
